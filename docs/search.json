[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction to R: Visualizing Cancer Data",
    "section": "",
    "text": "This workshop is designed to provide beginners with foundational understanding of R programming language. Through a combination of theoretical explanations, hands-on coding exercises, and practical applications, participants will learn how to leverage R for data visualization of cancer biology datasets.\nThe workshop will cover essential programming concepts and gradually introduce more advanced topics, with a focus on using the ggplot2 package suite for data visualization. The aim of this workshop is to analyse data and create informative plots."
  },
  {
    "objectID": "index.html#introduction",
    "href": "index.html#introduction",
    "title": "Introduction to R: Visualizing Cancer Data",
    "section": "",
    "text": "This workshop is designed to provide beginners with foundational understanding of R programming language. Through a combination of theoretical explanations, hands-on coding exercises, and practical applications, participants will learn how to leverage R for data visualization of cancer biology datasets.\nThe workshop will cover essential programming concepts and gradually introduce more advanced topics, with a focus on using the ggplot2 package suite for data visualization. The aim of this workshop is to analyse data and create informative plots."
  },
  {
    "objectID": "index.html#learning-objectives",
    "href": "index.html#learning-objectives",
    "title": "Introduction to R: Visualizing Cancer Data",
    "section": "Learning Objectives",
    "text": "Learning Objectives\nParticipants will gain the following skills:\n\nProficiency in using R and RStudio for data analysis.\nBasic R programming skills.\nReading datasets using readr package.\nCreating various types of plots using ggplot2 package."
  },
  {
    "objectID": "index.html#prerequisites",
    "href": "index.html#prerequisites",
    "title": "Introduction to R: Visualizing Cancer Data",
    "section": "Prerequisites",
    "text": "Prerequisites\nBefore starting this course you will need to ensure that your computer is set up with the required software. If you have any difficulty installing any of this software then please contact one of the trainers for help.\n\nInstalling R and RStudio\nR and RStudio are separate downloads and installations.\nR is the underlying statistical computing environment. The base R system and a very large collection of packages that give you access to a huge range of statistical and analytical functionality are available from CRAN, the Comprehensive R Archive Network.\nHowever, using R alone is no fun. RStudio is a graphical integrated development environment (IDE) that makes using R much easier and more interactive.\n\nLocal Installation\nYou need to install R before you install RStudio.\n\n\nWindows\n\n\nIf you already have R and RStudio installed:\n\nOpen RStudio, and click on “Help” &gt; “Check for updates”. If a new version is available, quit RStudio, and download the latest version for RStudio.\nTo check which version of R you are using, start RStudio and the first thing that appears in the console indicates the version of R you are running. Alternatively, you can type sessionInfo(), which will also display which version of R you are running. Go on the CRAN website and check whether a more recent version is available. If so, please download and install it. You can check here for more information on how to remove old versions from your system if you wish to do so.\n\nIf you don’t have R and RStudio installed:\n\nDownload R from the CRAN website.\nRun the .exe file that was just downloaded\nGo to the RStudio download page\nUnder Installers select RStudio x.yy.zzz - Windows 10/8/7 where x, y, and z represent version numbers)\nDouble click the file to install it\nOnce it’s installed, open RStudio to make sure it works and you don’t get any error messages.\n\n\n\n\nmacOS\n\nIf you already have R and RStudio installed:\n\nOpen RStudio, and click on “Help” &gt; “Check for updates”. If a new version is available, quit RStudio, and download the latest version for RStudio.\nTo check the version of R you are using, start RStudio and the first thing that appears on the terminal indicates the version of R you are running. Alternatively, you can type sessionInfo(), which will also display which version of R you are running. Go on the CRAN website and check whether a more recent version is available. If so, please download and install it.\n\nIf you don’t have R and RStudio installed:\n\nDownload R from the CRAN website.\nSelect the .pkg file for the latest R version\nDouble click on the downloaded file to install R\nIt is also a good idea to install XQuartz (needed by some packages)\nGo to the RStudio download page\nUnder Installers select RStudio x.yy.zzz - Mac OS X 10.6+ (64-bit) (where x, y, and z represent version numbers)\nDouble click the file to install RStudio\nOnce it’s installed, open RStudio to make sure it works and you don’t get any error messages.\n\n\n\n\n\nLinux\n\n\nFollow the instructions for your distribution from CRAN, they provide information to get the most recent version of R for common distributions. For most distributions, you could use your package manager (e.g., for Debian/Ubuntu run sudo apt-get install r-base, and for Fedora sudo yum install R), but we don’t recommend this approach as the versions provided by this are usually out of date. In any case, make sure you have at least R 4.3.2.\nGo to the RStudio download page\nUnder Installers select the version that matches your distribution, and install it with your preferred method (e.g., with Debian/Ubuntu sudo dpkg -i   rstudio-x.yy.zzz-amd64.deb at the terminal).\nOnce it’s installed, open RStudio to make sure it works and you don’t get any error messages.\n\n\n\n\n\nInstalling R Packages\nOn this course we will be making use of a brilliant collection of packages designed for data science called the tidyverse that make it much easier and more fun to work with your data. After installing R and RStudio, follow the instructions below to install the tidyverse package suite.\n\nAfter starting RStudio, at the console type: install.packages(\"tidyverse\") (look for the ‘Console’ tab and type at the &gt; prompt)\nYou can also do this by going to Tools -&gt; Install Packages and typing the names of the packages separated by a comma."
  },
  {
    "objectID": "index.html#data",
    "href": "index.html#data",
    "title": "Introduction to R: Visualizing Cancer Data",
    "section": "Data",
    "text": "Data\nThe Metabric study characterized the genomic mutations and gene expression profiles for 2509 primary breast tumours. In addition to the gene expression data generated using microarrays, genome-wide copy number profiles were obtained using SNP microarrays. Targeted sequencing was performed for 2509 primary breast tumours, along with 548 matched normals, using a panel of 173 of the most frequently mutated breast cancer genes as part of the Metabric study.\nRefrences:\n\nCurtis et al., Nature 486:346-52, 2012\nPereira et al., Nature Communications 7:11479, 2016\n\nBoth the clinical data and the gene expression values were downloaded from cBioPortal.\nWe excluded observations for patient tumor samples lacking expression data, resulting in a data set with fewer rows."
  },
  {
    "objectID": "index.html#r",
    "href": "index.html#r",
    "title": "Introduction to R: Visualizing Cancer Data",
    "section": "R!",
    "text": "R!\nR is a powerful programming language and open-source software widely used for statistical computing and data analysis. This programming language is developed by Ross Ihaka and Robert Gentleman at the University of Auckland, New Zealand. R has gained popularity among statisticians, data scientists, researchers, and analysts for its flexibility, extensibility, and robust statistical capabilities."
  },
  {
    "objectID": "index.html#why-learn-r",
    "href": "index.html#why-learn-r",
    "title": "Introduction to R: Visualizing Cancer Data",
    "section": "Why learn R?",
    "text": "Why learn R?\nHere are several compelling reasons to consider learning R:\n\nStatistical Analysis\nData Visualization\nOpen Source\nCommunity Support\nExtensibility\nIntegration with Other Languages\nData Science and Machine Learning\nWidely Used in Academia and Industry\nContinuous Development"
  },
  {
    "objectID": "index.html#getting-started-with-r",
    "href": "index.html#getting-started-with-r",
    "title": "Introduction to R: Visualizing Cancer Data",
    "section": "Getting Started with R",
    "text": "Getting Started with R\nTo begin working with R, users typically install an Integrated Development Environment (IDE) such as RStudio, which provides a user-friendly interface for coding, debugging, and visualizing results. R scripts are written in the R language and can be executed interactively or saved for later use."
  },
  {
    "objectID": "index.html#a-look-around-rstudio",
    "href": "index.html#a-look-around-rstudio",
    "title": "Introduction to R: Visualizing Cancer Data",
    "section": "A look around RStudio",
    "text": "A look around RStudio\nOpen RStudio. You will see four windows (aka panes). Each window has a different function. The screenshot below shows an analogy linking the different RStudio windows to cooking.\n\n\n\n\n\n\nConsole Pane\n\n\n\n\n\nOn the left-hand side, you’ll find the console. This is where you can input commands (code that R can interpret), and the responses to your commands, known as output, are displayed here. While the console is handy for experimenting with code, it doesn’t save any of your entered commands. Therefore, relying exclusively on the console is not recommended.\n\n\nHistory Pane\n\n\n\n\n\nThe history pane (located in the top right window) maintains a record of the commands that you have executed in the R console during your current R session. This includes both correct and incorrect commands.\nYou can navigate through your command history using the up and down arrow keys in the console. This allows you to quickly recall and re-run previous commands without retyping them.\n\n\nEnvironment Pane\n\n\n\n\n\nThe environment pane (located in the top right window) provides an overview of the objects (variables, data frames, etc.) that currently exist in your R session. It displays the names, types, dimensions, and some content of these objects. This allows you to monitor the state of your workspace in real-time.\n\n\nPlotting Pane\n\n\n\n\n\nThe plotting pane (located in the bottom right window) is where graphical output, such as plots and charts, is displayed when you create visualizations in R. The Plotting pane often includes tools for zooming, panning, and exporting plots, providing additional functionality for exploring and customizing your visualizations.\n\n\nHelp Pane\n\n\n\n\n\nThe help pane (located in the bottom right window) is a valuable resource for accessing documentation and information about R functions, packages, and commands. When you type a function or command in the console and press the F1 key (Mac: fn + F1) the Help pane displays relevant documentation. Additionally, you can type a keyword in the text box at the top right corner of the Help Pane.\n\n\nFiles Pane\n\n\n\n\n\nThe files pane provides a file browser and file management interface within RStudio. It allows you to navigate through your project directories, view files, and manage your file system.\n\n\nPackages Pane\n\n\n\n\n\nThis pane provides a user-friendly interface for managing R packages. It lists installed packages and allows you to load, unload, update, and install packages.\n\n\nViewer Pane\n\n\n\n\n\nIt is used to display dynamic content generated by R, such as HTML, Shiny applications, or interactive visualizations."
  },
  {
    "objectID": "index.html#working-directory",
    "href": "index.html#working-directory",
    "title": "Introduction to R: Visualizing Cancer Data",
    "section": "Working directory",
    "text": "Working directory\nOpening an RStudio session launches it from a specific location. This is the working directory. R looks in the working directory by default to read in data and save files. You can find out what the working directory is by using the command getwd(). This shows you the path to your working directory in the console. In Mac this is in the format /path/to/working/directory and in Windows C:\\path\\to\\working\\directory. It is often useful to have your data and R scripts in the same directory and set this as your working directory. We will do this now.\nMake a folder for this course somewhere on your computer that you will be able to easily find. Name the folder for example, Intro_R_course. Then, to set this folder as your working directory:\nIn RStudio click on the Files tab and then click on the three dots, as shown below.\n\n\n\n\n\nIn the window that appears, find the folder you created (e.g. Intro_R_course), click on it, then click Open. The files tab will now show the contents of your new folder. Click on More → Set As Working Directory, as shown below.\n\n\n\n\n\nNote: You can use an RStudio project as described here to automatically keep track of and set the working directory."
  },
  {
    "objectID": "index.html#quarto-document",
    "href": "index.html#quarto-document",
    "title": "Introduction to R: Visualizing Cancer Data",
    "section": "Quarto Document",
    "text": "Quarto Document\nIn RStudio, the Script pane (located at the top left window) serves as a dedicated space for writing, editing, and executing Quarto documents. It is where you compose and organize your R code, making it an essential area for creating reproducible and well-documented analyses.\nRStudio provides syntax highlighting in the Script pane, making it easier to identify different components of your code. You can execute individual lines or selections of code from the Script pane. This helps in testing and debugging code without running the entire document.\n\nOpen a New Quarto Document\nNavigate to File → New File → Quarto Document, a new pane will emerge in the top-left corner.\n\nAdd a title (e.g. IntroR), your name as Author and save this document as ‘IntroR-doc.qmd’ in your current working directory (e.g. IntroR)."
  },
  {
    "objectID": "index.html#comments",
    "href": "index.html#comments",
    "title": "Introduction to R: Visualizing Cancer Data",
    "section": "Comments",
    "text": "Comments\nIn R, any text following the hash symbol # is termed a comment. R disregards this text, considering it non-executable. Comments serve the purpose of documenting your code, aiding your future understanding of specific lines, and highlighting the intentions or challenges encountered.\nRStudio makes it easy to comment or uncomment a paragraph: Select the lines you want to comment (to comment a set of lines) or placing the cursor at any location of a line (to comment a single line), press at the same time on your keyboard ⌘ + Shift + C (mac) or Ctrl + Shift + C (Windows/Linux).\nExtensive use of comments is encouraged throughout this course.\n\n# This is a comment. Ignored by R. But useful for me!"
  },
  {
    "objectID": "index.html#executing-commands",
    "href": "index.html#executing-commands",
    "title": "Introduction to R: Visualizing Cancer Data",
    "section": "Executing Commands",
    "text": "Executing Commands\nExecuting commands or running code is the process of submitting a command to your computer, which does some computation and returns an answer. In RStudio, there are several ways to execute commands:\n\nSelect the line(s) of code using the mouse, and then click Run at the top right corner of the R text file.\nSelect Run Lines from the Code menu.\nClick anywhere on the line of code and click Run.\nSelect the line(s) you want to run. Press ⌘ + Return (Mac) or Ctrl + Enter (Windows/Linux) to run the selected code.\n\nWe suggest the third option, which is fastest. This link provides a list of useful RStudio keyboard shortcuts that can be beneficial when coding and navigating the RStudio IDE.\nWhen you type in, and then run the commands shown in the grey boxes below, you should see the result in the Console pane at bottom left.\n\nSimple Maths in R\nWe can use R as a calculator to do simple maths.\n\n3 + 5\n\n[1] 8\n\n\nMore complex calculator functions are built in to R, which is the reason it is popular among mathematicians and statisticians. To use these functions, we need to call these functions."
  },
  {
    "objectID": "index.html#getting-help",
    "href": "index.html#getting-help",
    "title": "Introduction to R: Visualizing Cancer Data",
    "section": "Getting Help",
    "text": "Getting Help\nIn R, the ? and ?? operators are used for accessing help documentation, but they behave slightly differently.\n\nThe ? operator is used to access help documentation for a specific function or topic. When you type ? followed by the name of a function, you get detailed information about that function. For example try:\n\n\n?mean\n\n\nView Output\n\n&lt;!DOCTYPE html&gt;\n\n\n\nR: Arithmetic Mean\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmean\n\n\nR Documentation\n\n\n\n\n\nArithmetic Mean\n\n\nDescription\n\n\nGeneric function for the (trimmed) arithmetic mean.\n\n\nUsage\n\nmean(x, ...)\n\n## Default S3 method:\nmean(x, trim = 0, na.rm = FALSE, ...)\n\n\nArguments\n\n\n\n\n\nx\n\n\n\nAn R object. Currently there are methods for numeric/logical vectors and date, date-time and time interval objects. Complex vectors are allowed for trim = 0, only.\n\n\n\n\n\ntrim\n\n\n\nthe fraction (0 to 0.5) of observations to be trimmed from each end of x before the mean is computed. Values of trim outside that range are taken as the nearest endpoint.\n\n\n\n\n\nna.rm\n\n\n\na logical evaluating to TRUE or FALSE indicating whether NA values should be stripped before the computation proceeds.\n\n\n\n\n\n…\n\n\n\nfurther arguments passed to or from other methods.\n\n\n\n\n\n\nValue\n\n\nIf trim is zero (the default), the arithmetic mean of the values in x is computed, as a numeric or complex vector of length one. If x is not logical (coerced to numeric), numeric (including integer) or complex, NA_real_ is returned, with a warning.\n\n\nIf trim is non-zero, a symmetrically trimmed mean is computed with a fraction of trim observations deleted from each end before the mean is computed.\n\n\nReferences\n\n\nBecker, R. A., Chambers, J. M. and Wilks, A. R. (1988) The New S Language. Wadsworth & Brooks/Cole.\n\n\nSee Also\n\n\nweighted.mean, mean.POSIXct, colMeans for row and column means.\n\n\nExamples\n\nx &lt;- c(0:10, 50)\nxm &lt;- mean(x)\nc(xm, mean(x, trim = 0.10))\n\n\n\n\n\n\nThe above command displays the help documentation for the mean function, providing information about its usage, arguments, and examples.\n\nThe ?? operator is used for a broader search across help documentation. It performs a search for the specified term or keyword in the documentation.\n\n\n??regression\n\nThis will search for the term “regression” in the help documentation and return relevant results. It’s useful when you want to find functions, packages, or topics related to a specific term.\n\n\n\n\n\n\nTip\n\n\n\nTab completion A very useful feature is Tab completion. You can start typing and use Tab to autocomplete code, for example, a function name."
  },
  {
    "objectID": "index.html#r-packages",
    "href": "index.html#r-packages",
    "title": "Introduction to R: Visualizing Cancer Data",
    "section": "R Packages",
    "text": "R Packages\nMany developers have built 1000s of functions and shared them with the R user community to help make everyone’s work easier and more efficient. These functions (short programs) are generally packaged up together in (wait for it) Packages. For example, the tidyverse package is a compilation of many different functions, all of which help with data transformation and visualization. Packages also contain data, which is often included to assist new users with learning the available functions.\n\nInstalling Packages\nPackages are hosted on repositories, with CRAN (Comprehensive R Archive Network) being the primary repository. To install packages from CRAN, you use the install.packages() function. For example:\n\ninstall.packages(\"tidyverse\")\n\nThis will spit out a lot of text into the console as the package is being installed. Once complete you should have a message:\nThe downloaded binary packages are in... followed by a long directory name.\nTo remove an installed package:\n\nremove.packages(\"tidyverse\")\n\n\n\nLoading Packages\nAfter installation, you need to load a package into your R session using the library() function. For example:\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nThis makes the functions and datasets from the ‘tidyverse’ package available for use in your current session.\n\n\n\n\n\n\nTip\n\n\n\nYou only need to install a package once. Once installed, you don’t need to reinstall it in subsequent sessions. However, you do need to load the package at the beginning of each R session using the library() function before you can utilize its functions and features. This ensures that the package is actively available for use in your current session.\n\n\nTo view packages currently loaded into memory:\n\n(.packages())\n\n [1] \"lubridate\" \"forcats\"   \"stringr\"   \"dplyr\"     \"purrr\"     \"readr\"    \n [7] \"tidyr\"     \"tibble\"    \"ggplot2\"   \"tidyverse\" \"stats\"     \"graphics\" \n[13] \"grDevices\" \"utils\"     \"datasets\"  \"methods\"   \"base\"     \n\nsearch()\n\n [1] \".GlobalEnv\"        \"package:lubridate\" \"package:forcats\"  \n [4] \"package:stringr\"   \"package:dplyr\"     \"package:purrr\"    \n [7] \"package:readr\"     \"package:tidyr\"     \"package:tibble\"   \n[10] \"package:ggplot2\"   \"package:tidyverse\" \"package:stats\"    \n[13] \"package:graphics\"  \"package:grDevices\" \"package:utils\"    \n[16] \"package:datasets\"  \"package:methods\"   \"Autoloads\"        \n[19] \"package:base\"     \n\n\n\n\nPackage Documentation\nEach package comes with documentation that explains how to use its functions. You can access this information using the help() function or by using ? before the function name:\n\nhelp(tidyverse)\n\n\nView Output\n\n&lt;!DOCTYPE html&gt;\n\n\n\nR: tidyverse: Easily Install and Load the ‘Tidyverse’\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntidyverse-package\n\n\nR Documentation\n\n\n\n\n\ntidyverse: Easily Install and Load the ‘Tidyverse’\n\n\nDescription\n\n\n\n\n\nThe ‘tidyverse’ is a set of packages that work in harmony because they share common data representations and ‘API’ design. This package is designed to make it easy to install and load multiple ‘tidyverse’ packages in a single step. Learn more about the ‘tidyverse’ at https://www.tidyverse.org.\n\n\nAuthor(s)\n\n\nMaintainer: Hadley Wickham hadley@rstudio.com\n\n\nOther contributors:\n\n\n\n\nRStudio [copyright holder, funder]\n\n\n\n\nSee Also\n\n\nUseful links:\n\n\n\n\nhttps://tidyverse.tidyverse.org\n\n\n\n\nhttps://github.com/tidyverse/tidyverse\n\n\n\n\nReport bugs at https://github.com/tidyverse/tidyverse/issues\n\n\n\n\n\n\n\n\nor by using vignette (if the documentation is in the form of vignettes):\n\nvignette(package=\"tidyverse\")"
  },
  {
    "objectID": "index.html#visualizing-data",
    "href": "index.html#visualizing-data",
    "title": "Introduction to R: Visualizing Cancer Data",
    "section": "Visualizing Data",
    "text": "Visualizing Data\nggplot2 package simplifies the creation of plots using data frames. This package offers a streamlined interface for defining variables to plot, configuring their display, and adjusting visual attributes. Consequently, adapting to changes in the data or transitioning between plot types requires only minimal modifications. This feature facilitates the creation of high-quality plots suitable for publication with minimal manual adjustments.\n\nReading the Data\nIn this section, you’ll learn the basics of reading data files into R using the readr package. We will use the read_csv() function from readr package to import a dataset. CSV short for Comma Separated Values, is a text format commonly used to store tabular data. Conventionally the first line contains column headings.\nThe first argument of the read_csv() function takes the path to the file (or a web link). The following code will download the metabric dataset.\n\nlibrary(readr)\nmetabric &lt;- read_csv(\"https://zenodo.org/record/6450144/files/metabric_clinical_and_expression_data.csv\")\n\n\n\nExploring the Data\nIn the previous section we imported a dataset, into a dataframe named metabric. This section demonstrates different ways to view this dataset.\nWhen the name of the object (data frame) is typed, the first few lines along with some information, such as the number of rows are displayed:\n\nmetabric\n\n\nOutput\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPatient_ID\nCohort\nAge_at_diagnosis\nSurvival_time\nSurvival_status\nVital_status\nChemotherapy\nRadiotherapy\nTumour_size\nTumour_stage\nNeoplasm_histologic_grade\nLymph_nodes_examined_positive\nLymph_node_status\nCancer_type\nER_status\nPR_status\nHER2_status\nHER2_status_measured_by_SNP6\nPAM50\n3-gene_classifier\nNottingham_prognostic_index\nCellularity\nIntegrative_cluster\nMutation_count\nESR1\nERBB2\nPGR\nTP53\nPIK3CA\nGATA3\nFOXA1\nMLPH\n\n\n\n\nMB-0000\n1\n75.65\n140.50000\nLIVING\nLiving\nNO\nYES\n22\n2\n3\n10\n3\nBreast Invasive Ductal Carcinoma\nPositive\nNegative\nNegative\nNEUTRAL\nclaudin-low\nER-/HER2-\n6.044\nNA\n4ER+\nNA\n8.929817\n9.333972\n5.680501\n6.338739\n5.704157\n6.932146\n7.953794\n9.729728\n\n\nMB-0002\n1\n43.19\n84.63333\nLIVING\nLiving\nNO\nYES\n10\n1\n3\n0\n1\nBreast Invasive Ductal Carcinoma\nPositive\nPositive\nNegative\nNEUTRAL\nLumA\nER+/HER2- High Prolif\n4.020\nHigh\n4ER+\n2\n10.047059\n9.729606\n7.505424\n6.192507\n5.757727\n11.251197\n11.843989\n12.536570\n\n\nMB-0005\n1\n48.87\n163.70000\nDECEASED\nDied of Disease\nYES\nNO\n15\n2\n2\n1\n2\nBreast Invasive Ductal Carcinoma\nPositive\nPositive\nNegative\nNEUTRAL\nLumB\nNA\n4.030\nHigh\n3\n2\n10.041281\n9.725825\n7.376123\n6.404516\n6.751566\n9.289758\n11.698169\n10.306115\n\n\nMB-0006\n1\n47.68\n164.93333\nLIVING\nLiving\nYES\nYES\n25\n2\n2\n3\n2\nBreast Mixed Ductal and Lobular Carcinoma\nPositive\nPositive\nNegative\nNEUTRAL\nLumB\nNA\n4.050\nModerate\n9\n1\n10.404685\n10.334979\n6.815637\n6.869241\n7.219187\n8.667723\n11.863379\n10.472181\n\n\nMB-0008\n1\n76.97\n41.36667\nDECEASED\nDied of Disease\nYES\nYES\n40\n2\n3\n8\n3\nBreast Mixed Ductal and Lobular Carcinoma\nPositive\nPositive\nNegative\nNEUTRAL\nLumB\nER+/HER2- High Prolif\n6.080\nHigh\n9\n2\n11.276581\n9.956267\n7.331223\n6.337951\n5.817818\n9.719781\n11.625006\n12.161961\n\n\nMB-0010\n1\n78.77\n7.80000\nDECEASED\nDied of Disease\nNO\nYES\n31\n4\n3\n0\n1\nBreast Invasive Ductal Carcinoma\nPositive\nPositive\nNegative\nNEUTRAL\nLumB\nER+/HER2- High Prolif\n4.062\nModerate\n7\n4\n11.239750\n9.739996\n5.954311\n5.419711\n6.123056\n9.787085\n12.142178\n11.433164\n\n\nMB-0014\n1\n56.45\n164.33333\nLIVING\nLiving\nYES\nYES\n10\n2\n2\n1\n2\nBreast Invasive Ductal Carcinoma\nPositive\nPositive\nNegative\nLOSS\nLumB\nNA\n4.020\nModerate\n3\n4\n10.793832\n9.276507\n7.720952\n5.992706\n7.481835\n8.365527\n11.482627\n10.755199\n\n\nMB-0022\n1\n89.08\n99.53333\nDECEASED\nDied of Other Causes\nNO\nYES\n29\n2\n2\n1\n2\nBreast Mixed Ductal and Lobular Carcinoma\nPositive\nNegative\nNegative\nNEUTRAL\nclaudin-low\nNA\n4.058\nModerate\n3\n1\n10.440667\n8.613192\n5.592522\n6.165420\n7.593330\n7.872962\n10.679403\n9.945023\n\n\nMB-0028\n1\n86.41\n36.56667\nDECEASED\nDied of Other Causes\nNO\nYES\n16\n2\n3\n1\n2\nBreast Invasive Ductal Carcinoma\nPositive\nNegative\nNegative\nGAIN\nLumB\nER+/HER2- High Prolif\n5.032\nModerate\n9\n4\n12.521038\n10.678266\n5.325554\n6.220372\n6.250678\n10.260059\n12.148375\n10.936002\n\n\nMB-0035\n1\n84.22\n36.26667\nDECEASED\nDied of Disease\nNO\nNO\n28\n2\n2\n0\n1\nBreast Invasive Lobular Carcinoma\nPositive\nNegative\nNegative\nLOSS\nHer2\nER+/HER2- High Prolif\n3.056\nHigh\n3\n5\n7.536847\n11.514514\n5.587666\n6.411477\n5.988243\n10.212611\n12.804542\n13.474571\n\n\n\n\n\n\n\nThe dim() function prints the dimensions (rows x columns) of the data frame:\n\ndim(metabric)\n\n\nOutput\n\n\n[1] 1904   32\n\n\n\nThis information is available at the environment pane in the top right panel as the number of observations (rows) and variables (columns).\nThe nrow() function prints the number of rows while ncol() prints the number of columns:\n\nnrow(metabric)\nncol(metabric)\n\n\nOutput\n\n\n[1] 1904\n\n\n[1] 32\n\n\n\nThe View() function gives a spreadsheet-like view of the data frame:\n\nView(metabric)\n\nBy clicking the object on the environment tab also gives a spreadsheet-like view of the object: \nThe head() function prints the top 6 rows of a data frame:\n\nhead(metabric)\n\n\nOutput\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPatient_ID\nCohort\nAge_at_diagnosis\nSurvival_time\nSurvival_status\nVital_status\nChemotherapy\nRadiotherapy\nTumour_size\nTumour_stage\nNeoplasm_histologic_grade\nLymph_nodes_examined_positive\nLymph_node_status\nCancer_type\nER_status\nPR_status\nHER2_status\nHER2_status_measured_by_SNP6\nPAM50\n3-gene_classifier\nNottingham_prognostic_index\nCellularity\nIntegrative_cluster\nMutation_count\nESR1\nERBB2\nPGR\nTP53\nPIK3CA\nGATA3\nFOXA1\nMLPH\n\n\n\n\nMB-0000\n1\n75.65\n140.50000\nLIVING\nLiving\nNO\nYES\n22\n2\n3\n10\n3\nBreast Invasive Ductal Carcinoma\nPositive\nNegative\nNegative\nNEUTRAL\nclaudin-low\nER-/HER2-\n6.044\nNA\n4ER+\nNA\n8.929817\n9.333972\n5.680501\n6.338739\n5.704157\n6.932146\n7.953794\n9.729728\n\n\nMB-0002\n1\n43.19\n84.63333\nLIVING\nLiving\nNO\nYES\n10\n1\n3\n0\n1\nBreast Invasive Ductal Carcinoma\nPositive\nPositive\nNegative\nNEUTRAL\nLumA\nER+/HER2- High Prolif\n4.020\nHigh\n4ER+\n2\n10.047059\n9.729606\n7.505424\n6.192507\n5.757727\n11.251197\n11.843989\n12.536570\n\n\nMB-0005\n1\n48.87\n163.70000\nDECEASED\nDied of Disease\nYES\nNO\n15\n2\n2\n1\n2\nBreast Invasive Ductal Carcinoma\nPositive\nPositive\nNegative\nNEUTRAL\nLumB\nNA\n4.030\nHigh\n3\n2\n10.041281\n9.725825\n7.376123\n6.404516\n6.751566\n9.289758\n11.698169\n10.306115\n\n\nMB-0006\n1\n47.68\n164.93333\nLIVING\nLiving\nYES\nYES\n25\n2\n2\n3\n2\nBreast Mixed Ductal and Lobular Carcinoma\nPositive\nPositive\nNegative\nNEUTRAL\nLumB\nNA\n4.050\nModerate\n9\n1\n10.404685\n10.334979\n6.815637\n6.869241\n7.219187\n8.667723\n11.863379\n10.472181\n\n\nMB-0008\n1\n76.97\n41.36667\nDECEASED\nDied of Disease\nYES\nYES\n40\n2\n3\n8\n3\nBreast Mixed Ductal and Lobular Carcinoma\nPositive\nPositive\nNegative\nNEUTRAL\nLumB\nER+/HER2- High Prolif\n6.080\nHigh\n9\n2\n11.276581\n9.956267\n7.331223\n6.337951\n5.817818\n9.719781\n11.625006\n12.161961\n\n\nMB-0010\n1\n78.77\n7.80000\nDECEASED\nDied of Disease\nNO\nYES\n31\n4\n3\n0\n1\nBreast Invasive Ductal Carcinoma\nPositive\nPositive\nNegative\nNEUTRAL\nLumB\nER+/HER2- High Prolif\n4.062\nModerate\n7\n4\n11.239750\n9.739996\n5.954311\n5.419711\n6.123056\n9.787085\n12.142178\n11.433164\n\n\n\n\n\n\n\nSimilarly, the tail() function prints the bottom 6 rows of the data frame:\n\ntail(metabric)\n\n\nOutput\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPatient_ID\nCohort\nAge_at_diagnosis\nSurvival_time\nSurvival_status\nVital_status\nChemotherapy\nRadiotherapy\nTumour_size\nTumour_stage\nNeoplasm_histologic_grade\nLymph_nodes_examined_positive\nLymph_node_status\nCancer_type\nER_status\nPR_status\nHER2_status\nHER2_status_measured_by_SNP6\nPAM50\n3-gene_classifier\nNottingham_prognostic_index\nCellularity\nIntegrative_cluster\nMutation_count\nESR1\nERBB2\nPGR\nTP53\nPIK3CA\nGATA3\nFOXA1\nMLPH\n\n\n\n\nMB-7294\n4\n59.20\n82.73333\nDECEASED\nDied of Disease\nNO\nNO\n15\nNA\n2\n1\n2\nBreast Invasive Ductal Carcinoma\nPositive\nPositive\nNegative\nGAIN\nLumB\nER+/HER2- High Prolif\n4.03\nHigh\n1\n2\n11.290976\n10.846545\n7.312247\n5.660943\n6.190000\n9.424235\n11.07569\n11.567166\n\n\nMB-7295\n4\n43.10\n196.86667\nLIVING\nLiving\nNO\nYES\n25\nNA\n3\n1\n2\nBreast Invasive Lobular Carcinoma\nPositive\nPositive\nNegative\nNEUTRAL\nLumA\nER+/HER2- Low Prolif\n5.05\nHigh\n3\n4\n9.591235\n9.935178\n7.984515\n6.753291\n6.279207\n9.207323\n11.28119\n11.337601\n\n\nMB-7296\n4\n42.88\n44.73333\nDECEASED\nDied of Disease\nNO\nYES\n20\nNA\n3\n1\n2\nBreast Invasive Ductal Carcinoma\nPositive\nNegative\nPositive\nGAIN\nLumB\nNA\n5.04\nHigh\n5\n6\n9.733986\n13.753037\n5.616082\n6.271912\n5.999093\n9.530390\n11.53203\n11.626140\n\n\nMB-7297\n4\n62.90\n175.96667\nDECEASED\nDied of Disease\nNO\nYES\n25\nNA\n3\n45\n3\nBreast Invasive Ductal Carcinoma\nPositive\nPositive\nNegative\nNEUTRAL\nLumB\nNA\n6.05\nHigh\n1\n4\n11.053198\n10.228570\n7.478069\n6.212256\n6.192399\n9.540589\n11.48276\n11.180360\n\n\nMB-7298\n4\n61.16\n86.23333\nDECEASED\nDied of Other Causes\nNO\nNO\n25\nNA\n2\n12\n3\nBreast Invasive Ductal Carcinoma\nPositive\nPositive\nNegative\nNEUTRAL\nLumB\nER+/HER2- High Prolif\n5.05\nModerate\n1\n15\n11.055114\n9.892589\n8.282737\n6.466712\n6.287254\n10.365901\n11.37118\n12.827069\n\n\nMB-7299\n4\n60.02\n201.90000\nDECEASED\nDied of Other Causes\nNO\nYES\n20\nNA\n3\n1\n2\nBreast Invasive Ductal Carcinoma\nPositive\nNegative\nNegative\nNEUTRAL\nLumB\nER+/HER2- High Prolif\n5.04\nHigh\n10\n3\n10.696475\n10.227787\n5.533486\n6.180511\n6.208784\n9.749368\n10.86753\n9.847856\n\n\n\n\n\n\n\nThe colnames() function displays all the column names:\n\ncolnames(metabric)\n\n [1] \"Patient_ID\"                    \"Cohort\"                       \n [3] \"Age_at_diagnosis\"              \"Survival_time\"                \n [5] \"Survival_status\"               \"Vital_status\"                 \n [7] \"Chemotherapy\"                  \"Radiotherapy\"                 \n [9] \"Tumour_size\"                   \"Tumour_stage\"                 \n[11] \"Neoplasm_histologic_grade\"     \"Lymph_nodes_examined_positive\"\n[13] \"Lymph_node_status\"             \"Cancer_type\"                  \n[15] \"ER_status\"                     \"PR_status\"                    \n[17] \"HER2_status\"                   \"HER2_status_measured_by_SNP6\" \n[19] \"PAM50\"                         \"3-gene_classifier\"            \n[21] \"Nottingham_prognostic_index\"   \"Cellularity\"                  \n[23] \"Integrative_cluster\"           \"Mutation_count\"               \n[25] \"ESR1\"                          \"ERBB2\"                        \n[27] \"PGR\"                           \"TP53\"                         \n[29] \"PIK3CA\"                        \"GATA3\"                        \n[31] \"FOXA1\"                         \"MLPH\""
  },
  {
    "objectID": "index.html#building-a-basic-plot",
    "href": "index.html#building-a-basic-plot",
    "title": "Introduction to R: Visualizing Cancer Data",
    "section": "Building a Basic Plot",
    "text": "Building a Basic Plot\nThe construction of ggplot graphics is incremental, allowing for the addition of new elements in layers. This approach grants users extensive flexibility and customization options, enabling the creation of tailored plots to suit specific needs.\n\nTo build a ggplot, the following basic template can be used for different types of plots.\n Three things are required for a ggplot:\n\n1. The data\nWe first specify the data frame that contains the relevant data to create a plot. Here we are sending the metabric dataset to the ggplot() function.\n\n# render plot background\nggplot(data = metabric)\n\n\n\n\n\n\n\n\nThis command results in an empty gray panel. We must specify how various columns of the data frame should be depicted in the plot.\n\n\n2. Aesthetics aes()\nNext, we specify the columns in the data we want to map to visual properties (called aesthetics or aes in ggplot2). e.g. the columns for x values, y values and colours.\nSince we are interested in generating a scatter plot, each point will have an x and a y coordinate. Therefore, we need to specify the x-axis to represent the transcription factor (GATA3) and y-axis to represent the estrogen receptor alpha (ESR1).\n\nggplot(data = metabric, mapping = aes(x = GATA3, y = ESR1))\n\n\n\n\n\n\n\n\nThis results in a plot which includes the grid lines, the variables and the scales for x and y axes. However, the plot is empty or lacks data points.\n\n\n3. Geometric Representation geom_()\nFinally, we specify the type of plot (the geom). There are different types of geoms:\n\n\n\n\n\n\n\n\n\n\ngeom_blank() draws an empty plot.\n\n\n\n\n\n\n\n\n\ngeom_segment() draws a straight line. geom_vline() draws a vertical line and geom_hline() draws a horizontal line.\n\n\n\n\n\n\n\n\n\ngeom_curve() draws a curved line.\n\n\n\n\n\n\n\n\n\ngeom_line()/geom_path() makes a line plot. geom_line() connects points from left to right and geom_path() connects points in the order they appear in the data.\n\n\n\n\n\n\n\n\n\n\n\n\ngeom_point() produces a scatterplot.\n\n\n\n\n\n\n\n\n\ngeom_jitter() adds a small amount of random noise to the points in a scatter plot.\n\n\n\n\n\n\n\n\n\ngeom_dotplot() produces a dot plot.\n\n\n\n\n\n\n\n\n\ngeom_smooth() adds a smooth trend line to a plot.\n\n\n\n\n\n\n\n\n\ngeom_quantile() draws fitted quantile with lines (a scatter plot with regressed quantiles).\n\n\n\n\n\n\n\n\n\ngeom_density() creates a density plot.\n\n\n\n\n\n\n\n\n\n\n\n\ngeom_histogram() produces a histogram.\n\n\n\n\n\n\n\n\n\ngeom_bar() makes a bar chart. Height of the bar is proportional to the number of cases in each group.\n\n\n\n\n\n\n\n\n\ngeom_col() makes a bar chart. Height of the bar is proportional to the values in data.\n\n\n\n\n\n\n\n\n\n\n\n\ngeom_boxplot() produces a box plot.\n\n\n\n\n\n\n\n\n\ngeom_violin() creates a violin plot.\n\n\n\n\n\n\n\n\n\n\n\n\ngeom_ribbon() produces a ribbon (y interval defined line).\n\n\n\n\n\n\n\n\n\ngeom_area() draws an area plot, which is a line plot filled to the y-axis (filled lines).\n\n\n\n\n\n\n\n\n\ngeom_rect(), geom_tile() and geom_raster() draw rectangles.\n\n\n\n\n\n\n\n\n\ngeom_polygon() draws polygons, which are filled paths.\n\n\n\n\n\n\n\n\n\n\n\n\ngeom_text() adds text to a plot.\n\n\n\n\n\n\n\n\n\ngeom_text() adds label to a plot.\n\n\n\n\n\nThe range of geoms available in ggplot2 can be obtained by navigating to the ggplot2 package in the Packages tab pane in RStudio (bottom right-hand corner) and scrolling down the list of functions sorted alphabetically to the geom_... functions.\nSince we are interested in creating a scatter plot, the geometric representation of the data will be in point form. Therefore we use the geom_point() function.\nTo plot the expression of estrogen receptor alpha (ESR1) against that of the transcription factor, GATA3:\n\nggplot(data = metabric, mapping = aes(x = GATA3, y = ESR1)) + geom_point() \n\n\n\n\n\n\n\n\nNotice that we use the + sign to add a layer of points to the plot. This concept bears resemblance to Adobe Photoshop, where layers of images can be rearranged and edited independently. In ggplot, each layer is added over the plot in accordance with its position in the code using the + sign."
  },
  {
    "objectID": "index.html#customizing-plots",
    "href": "index.html#customizing-plots",
    "title": "Introduction to R: Visualizing Cancer Data",
    "section": "Customizing Plots",
    "text": "Customizing Plots\n\nAdding Colour\nThe above plot could be made more informative. For instance, the additional information regarding the ER status (i.e., ER_status column) could be incorporated into the plot. To do this, we can utilize aes() and specify which column in the metabric data frame should be represented as the color of the points.\n\nggplot(data = metabric, mapping = aes(x = GATA3, y = ESR1, colour)) +\n    geom_point(mapping = aes(colour = ER_status)) \n\n\n\n\n\n\n\n\nNotice that we specify the colour = ER_status argument in the aes() mapping inside the geom_() function instead of ggplot() function.\nTo colour points based on a continuous variable, for example: Nottingham prognostic index (NPI):\n\nggplot(data = metabric, mapping = aes(x = GATA3, y = ESR1)) +\n  geom_point(aes(colour = Neoplasm_histologic_grade)) \n\n\n\n\n\n\n\n\nIn ggplot2, a color scale is used for continuous variables, while discrete or categorical values are represented using discrete colors.\nNote that some patient samples lack expression values, leading ggplot2 to remove those points with missing values for ESR1 and GATA3.\n\n\nAdding Shape\nLet’s add shape to points.\n\nggplot(data = metabric, mapping = aes(x = GATA3, y = ESR1)) + \n  geom_point(mapping = aes(shape = `3-gene_classifier`))\n\nWarning: Removed 204 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\nNote that some patient samples have not been classified and ggplot has removed those points with missing values for the three-gene classifier.\nThe shape argument allows you to customize the appearance of all data points by assigning an integer associated with predefined shapes shown below:\n\n\n\n\n\nTo use asterix instead of points in the plot:\n\nggplot(data = metabric, mapping = aes(x = GATA3, y = ESR1)) + \n  geom_point(shape = 8)\n\n\n\n\n\n\n\n\nIt would be useful to be able to change the shape of all the points. We can do so by setting the size to a single value rather than mapping it to one of the variables in the data set - this has to be done outside the aesthetic mappings (i.e. outside the aes() bit) as above.\n\n\n\n\n\n\nAesthetic Setting vs. Mapping\n\n\n\nInstead of mapping an aesthetic property to a variable, you can set it to a single value by specifying it in the layer parameters (outside aes()). We map an aesthetic to a variable (e.g., aes(shape =3-gene_classifier)) or set it to a constant (e.g., shape = 8). If you want appearance to be governed by a variable in your data frame, put the specification inside aes(); if you want to override the default size or colour, put the value outside of aes().\n\n# size outside aes()\nggplot(data = metabric, mapping = aes(x = GATA3, y = ESR1)) +\n  geom_point(shape = 8)\n# size inside aes()\nggplot(data = metabric, mapping = aes(x = GATA3, y = ESR1)) +\n  geom_point(aes(shape = `3-gene_classifier`))\n\nWarning: Removed 204 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe above plots are created with similar code, but have rather different outputs. The first plot sets the size to a value and the second plot maps (not sets) the size to the three-gene classifier variable.\n\n\nIt is usually preferable to use colours to distinguish between different categories but sometimes colour and shape are used together when we want to show which group a data point belongs to in two different categorical variables.\n\nggplot(data = metabric, mapping = aes(x = GATA3, y = ESR1)) +\n  geom_point(aes(colour = PAM50, shape = `3-gene_classifier`))\n\nWarning: Removed 204 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\nAdding Size and Transparency\nWe can adjust the size and/or transparency of the points.\nLet’s first increase the size of points.\n\nggplot(data = metabric, mapping = aes(x = GATA3, y = ESR1)) +\n  geom_point(mapping = aes(colour = PAM50), size = 2)\n\n\n\n\n\n\n\n\nNote that here we add the size argument outside of the the aesthetic mapping.\nTransparency can be useful when we have a large number of points as we can more easily tell when points are overlaid, but like size, it is not usually mapped to a variable and sits outside the aes().\nLet’s change the transparency of points.\n\nggplot(data = metabric, mapping = aes(x = GATA3, y = ESR1)) +\n  geom_point(mapping = aes(colour = `3-gene_classifier`), alpha = 0.5) \n\n\n\n\n\n\n\n\n\n\nAdding Layers\nWe can add another layer to this plot using a different geometric representation (or geom_ function) we discussed previously.\nLet’s add trend lines to this plot using the geom_smooth() function which provide a summary of the data.\n\nggplot(data = metabric, mapping = aes(x = GATA3, y = ESR1)) +\n  geom_point() +\n  geom_smooth()\n\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n\n\n\n\n\n\n\n\n\nNote that the shaded area surrounding blue line represents the standard error bounds on the fitted model.\nLet’s make the plot look a bit prettier by reducing the size of the points and making them transparent. We’re not mapping size or alpha to any variables, just setting them to constant values, and we only want these settings to apply to the points, so we set them inside geom_point().\n\nggplot(data = metabric, mapping = aes(x = GATA3, y = ESR1)) +\n  geom_point(size = 0.5, alpha = 0.5) +\n  geom_smooth() \n\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n\n\n\n\n\n\n\n\n\nLet’s add some colour to the plot.\n\nggplot(data = metabric, mapping = aes(x = GATA3, y = ESR1, colour = ER_status)) +\n  geom_point(size = 0.5, alpha = 0.5) +\n  geom_smooth()\n\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n\n\n\n\n\n\n\n\n\n\n\nAdding Labels\nBy default, ggplot use the column names specified inside the aes() as the axis labels. We can change this using the x = and y = arguments in labs() function.\n\nggplot(data = metabric, mapping = aes(x = GATA3, y = ESR1)) +\n  geom_point(mapping = aes(colour = ER_status), size = 0.5, alpha = 0.5) +\n  geom_smooth() +\n  labs(x = \"GATA3 Expression\",\n       y = \"ESR1 Expression\")\n\n\n\n\n\n\n\n\nYou can also add a title, a subtitle, a caption or a tag.\n\nggplot(data = metabric, mapping = aes(x = GATA3, y = ESR1)) +\n  geom_point(mapping = aes(colour = ER_status), size = 0.5, alpha = 0.5) +\n  geom_smooth() +\n  labs(\n    title = \"Expression of estrogen receptor alpha against the transcription factor\",\n    subtitle = \"ESR1 vs GATA3\",\n    caption = \"This is a caption\",\n    tag = \"Figure 1\",\n    x = \"GATA3 Expression\",\n    y = \"ESR1 Expression\")\n\n\n\n\n\n\n\n\n\n\nThemes\nThemes control the overall appearance of the plot, including background color, grid lines, axis labels, and text styles. ggplot offers several built-in themes, and you can also create custom themes to match your preferences or the requirements of your publication. The default theme has a grey background.\n\nggplot(data = metabric, mapping = aes(x = GATA3, y = ESR1)) +\n  geom_point(mapping = aes(colour = ER_status), size = 0.5, alpha = 0.5) +\n  geom_smooth() + theme_bw()\n\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n\n\n\n\n\n\n\n\n\nTry these themes yourselves: theme_classic(), theme_dark(), theme_grey() (default), theme_light(), theme_linedraw(), theme_minimal(), theme_void() and theme_test()."
  },
  {
    "objectID": "index.html#different-types-of-plots",
    "href": "index.html#different-types-of-plots",
    "title": "Introduction to R: Visualizing Cancer Data",
    "section": "Different Types of Plots",
    "text": "Different Types of Plots\n\nBar chart\nThe metabric study redefined how we think about breast cancer by identifying and characterizing several new subtypes, referred to as integrative clusters. Let’s create a bar chart of the number of patients whose cancers fall within each subtype in the metabric cohort.\nThe geom_bar is the geom used to plot bar charts. It requires a single aesthetic mapping of the categorical variable of interest to x.\n\nggplot(data = metabric) +\n  geom_bar(aes(x = Integrative_cluster))\n\n\n\n\n\n\n\n\nThe dark grey bars are a big ugly - what if we want each bar to be a different colour?\n\nggplot(data = metabric) +\n  geom_bar(aes(x = Integrative_cluster, colour = Integrative_cluster))\n\n\n\n\n\n\n\n\nColouring the edges wasn’t quite what we had in mind. Look at the help for geom_bar to see what other aesthetic we should have used.\n\nggplot(data = metabric) +\n  geom_bar(aes(x = Integrative_cluster, fill = Integrative_cluster))\n\n\n\n\n\n\n\n\n\n\nBox plot\nBox plots (or box & whisker plots) are a particular favourite seen in many seminars and papers. Box plots summarize the distribution of a set of values by displaying the minimum and maximum values, the median (i.e. middle-ranked value), and the range of the middle 50% of values (inter-quartile range). The whisker line extending above and below the IQR box define Q3 + (1.5 x IQR), and Q1 - (1.5 x IQR) respectively.\n To create a box plot from Metabric dataset:\n\nggplot(data = metabric, mapping = aes(x = ER_status, y = GATA3)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\nLet’s try a colour aesthetic to also look at how estrogen receptor expression differs between HER2 positive and negative tumours.\n\nggplot(data = metabric, mapping = aes(x = ER_status, y = GATA3, colour = HER2_status)) +\n  geom_boxplot() \n\n\n\n\n\n\n\n\n\n\nViolin plot\nA violin plot is used to visualize the distribution of a numeric variable across different categories. It combines aspects of a box plot and a kernel density plot.\nThe width of the violin at any given point represents the density of data at that point. Wider sections indicate a higher density of data points, while narrower sections indicate lower density. By default, violin plots are symmetric.\n\nggplot(data = metabric, aes(y = GATA3, x = ER_status, colour = HER2_status)) + \n  geom_violin()\n\n\n\n\n\n\n\n\n\n\nHistogram\nThe geom for creating histograms is, rather unsurprisingly, geom_histogram().\n\nggplot(data = metabric) +\n  geom_histogram(aes(x = Age_at_diagnosis))\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\nThe warning message hints at picking a more optimal number of bins by specifying the binwidth argument.\n\nggplot(data = metabric) +\n  geom_histogram(aes(x = Age_at_diagnosis), binwidth = 5)\n\n\n\n\n\n\n\n\nOr we can set the number of bins.\n\nggplot(data = metabric) +\n  geom_histogram(aes(x = Age_at_diagnosis), bins = 20)\n\n\n\n\n\n\n\n\nThese histograms are not very pleasing, aesthetically speaking - how about some better aesthetics?\n\nggplot(data = metabric) +\n  geom_histogram(\n    aes(x = Age_at_diagnosis), \n    bins = 20, \n    colour = \"darkblue\", \n    fill = \"grey\")"
  },
  {
    "objectID": "index.html#saving-plot-images",
    "href": "index.html#saving-plot-images",
    "title": "Introduction to R: Visualizing Cancer Data",
    "section": "Saving plot images",
    "text": "Saving plot images\nUse ggsave() to save the last plot you displayed.\n\nggsave(\"age_at_diagnosis_histogram.png\")\n\nYou can alter the width and height of the plot and can change the image file type.\n\nggsave(\"age_at_diagnosis_histogram.pdf\", width = 20, height = 12, units = \"cm\")"
  },
  {
    "objectID": "index.html#exercise",
    "href": "index.html#exercise",
    "title": "Introduction to R: Visualizing Cancer Data",
    "section": "Exercise",
    "text": "Exercise\n\nGenerate the following plot.\n\nYou are required to:\n\nSpecify the dataset as metabric\nx-axis plots Integrative_cluster column and y-axis plots ESR1 column.\nUse the suitable geom function\nUse labs(x = ?, y = ?) method to replace ? with correct x and y labels.\n\n\n\n\n\n\n\nThe default theme has the characteristic grey background which isn’t particularly suitable for printing on paper. We can change to one of a number of alternative themes available in the ggplot2 package. Add a theme to create the following plot.\n\n\n\n\n\n\n\nThese content were adapted from the Introduction to R: exploring the tidyverse course materials."
  }
]